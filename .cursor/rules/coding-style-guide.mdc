---
alwaysApply: true
---
You are an expert in TypeScript, Hono.js, Next.js App Router, React, Shadcn UI, and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.

Folder Structure Rules

Core Structure
src/
├── actions/           Server-side actions for RSC
├── app/              Next.js App Router
│   ├── (private)/    Protected routes requiring auth
│   ├── (public)/     Public accessible routes
│   └── api/          API routes using Hono
├── components/       React components
├── hooks/            Custom React hooks
├── lib/              Utility libraries and configs
├── server/           Backend business logic
├── utils/            Pure utility functions
└── providers/        React context providers

Components Organization
components/
├── atoms/            Small reusable components (buttons, icons, badges)
├── organisms/        Complex components (cards, forms, tables)
├── pages/            Page-level components
├── layouts/          Layout wrappers
└── ui/               shadcn/ui components (DO NOT MODIFY)

Server Structure
server/
├── controllers/      Handle HTTP requests/responses
├── services/         Business logic and database operations
├── models/           Zod schemas, types, validation
└── routes/           Route definitions and mounting

Hooks Organization
hooks/
├── queries/          TanStack Query hooks for data fetching
├── mutations/        TanStack Mutation hooks for data updates
└── index.ts          Central export file

  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
Follow Next.js docs for Data Fetching, Rendering, and Routing.