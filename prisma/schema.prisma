// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  // Appointment relations
  patientAppointments   Appointment[] @relation("PatientAppointments")
  scheduledAppointments Appointment[] @relation("ScheduledAppointments")

  // Notifications
  notifications Notification[]

  dentist Dentist?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Appointment {
  appointmentId    String    @id @default(cuid()) @map("appointment_id")
  patientId        String    @map("patient_id")
  dentistId        String?   @map("dentist_id")
  scheduledBy      String    @map("scheduled_by")
  appointmentDate  DateTime  @map("appointment_date")
  startTime        DateTime  @map("start_time")
  endTime          DateTime? @map("end_time")
  notes            String?
  createdAt        DateTime  @default(now()) @map("created_at")
  notifContent     String?   @map("notif_content")
  treatmentOptions String[]  @map("treatment_options")
  status           String    @default("pending") @map("status")
  clinicBranchId   Int       @default(1) @map("clinic_branch_id")
  detailedNotes    String?   @map("detailed_notes")

  // Foreign key relations
  patient         User          @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  dentist         Dentist?      @relation("DentistAppointments", fields: [dentistId], references: [id], onDelete: Cascade)
  scheduledByUser User          @relation("ScheduledAppointments", fields: [scheduledBy], references: [id], onDelete: Cascade)
  clinicBranch    ClinicBranch  @relation(fields: [clinicBranchId], references: [id], onDelete: Cascade)
  
  // Notifications
  notifications   Notification[]

  @@map("appointment")
}

model Dentist {
  id                   String                        @id @default(cuid())
  userId               String                        @unique
  user                 User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization       String[]
  availability         DentistAvailability[]
  specificAvailability SpecificDentistAvailability[]
  leaves               DentistLeaves[]
  appointments         Appointment[]                 @relation("DentistAppointments")

  @@map("dentist")
}

model ClinicBranch {
  id                   Int                           @id @default(autoincrement())
  name                 String                        @map("name")
  address              String                        @map("address")
  phone                String                        @map("phone")
  email                String                        @map("email")
  availability         DentistAvailability[]
  specificAvailability SpecificDentistAvailability[]
  appointments         Appointment[]

  @@map("clinic_branch")
}

model DentistAvailability {
  id                String  @id @default(cuid()) @map("id")
  dentistId         String  @map("dentist_id")
  standardStartTime String  @map("standard_start_time")
  standardEndTime   String  @map("standard_end_time")
  breakStartTime    String? @map("break_start_time")
  breakEndTime      String? @map("break_end_time")
  dayOfWeek         String  @map("day_of_week")
  clinicBranchId    Int     @map("clinic_branch_id")

  dentist      Dentist      @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  clinicBranch ClinicBranch @relation(fields: [clinicBranchId], references: [id], onDelete: Cascade)

  @@map("dentist_availability")
}

model SpecificDentistAvailability {
  id             String   @id @default(cuid())
  dentistId      String   @map("dentist_id")
  startDateTime  DateTime @map("start_date_time")
  endDateTime    DateTime @map("end_date_time")
  clinicBranchId Int?     @map("clinic_branch_id")

  dentist      Dentist       @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  clinicBranch ClinicBranch? @relation(fields: [clinicBranchId], references: [id], onDelete: Cascade)

  @@map("specific_dentist_availability")
}

model DentistLeaves {
  id            String   @id @default(cuid())
  dentistId     String   @map("dentist_id")
  startDateTime DateTime @map("start_date_time")
  endDateTime   DateTime @map("end_date_time")

  dentist Dentist @relation(fields: [dentistId], references: [id], onDelete: Cascade)

  @@map("dentist_leaves")
}

model Notification {
  id          String   @id @default(cuid()) @map("id")
  userId      String   @map("user_id")
  title       String   @map("title")
  message     String   @map("message")
  type        String   @default("info") @map("type") // info, success, warning, error
  isRead      Boolean  @default(false) @map("is_read")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Optional reference to related entities
  appointmentId String? @map("appointment_id")
  
  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointment Appointment? @relation(fields: [appointmentId], references: [appointmentId], onDelete: SetNull)

  @@map("notification")
}


