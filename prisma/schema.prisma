// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  // Appointment relations
  patientAppointments   Appointment[] @relation("PatientAppointments")
  dentistAppointments   Appointment[] @relation("DentistAppointments")
  scheduledAppointments Appointment[] @relation("ScheduledAppointments")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Appointment {
  appointmentId    String    @id @default(cuid()) @map("appointment_id")
  patientId        String    @map("patient_id")
  dentistId        String?   @map("dentist_id")
  scheduledBy      String    @map("scheduled_by")
  appointmentDate  DateTime  @map("appointment_date")
  startTime        DateTime  @map("start_time")
  endTime          DateTime? @map("end_time")
  notes            String?
  createdAt        DateTime  @default(now()) @map("created_at")
  notifContent     String?   @map("notif_content")
  treatmentOptions String[]  @map("treatment_options")
  status           String    @default("pending") @map("status")

  // Foreign key relations (assuming these reference User model)
  patient         User  @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  dentist         User? @relation("DentistAppointments", fields: [dentistId], references: [id], onDelete: Cascade)
  scheduledByUser User  @relation("ScheduledAppointments", fields: [scheduledBy], references: [id], onDelete: Cascade)

  @@map("appointment")
}
